---
// src/pages/gaps/[slug].astro - Fixed to resolve initialization error
import BaseLayout from "../../layouts/BaseLayout.astro";
import RankIndicator from "../../components/standalone/RankIndicator";
import EnhancedBackButton from "../../components/standalone/EnhancedBackButton";
import FieldLabel from "../../components/standalone/FieldLabel";
import SuggestEditButton from "../../components/standalone/SuggestEditButton";
import SurveyGraph from "../../components/standalone/SurveyGraph";
import { getEnhancedData } from "../../lib/enhancedData";
import { createCapabilitySlug } from "../../lib/slugUtils";

export async function getStaticPaths() {
  // Fetch all enhanced data
  const { bottlenecks } = await getEnhancedData();

  // Generate paths for each bottleneck
  return bottlenecks.map((bottleneck) => {
    return {
      params: { slug: bottleneck.slug },
      props: { bottleneck },
    };
  });
}

// TypeScript type for the props
interface Props {
  bottleneck: any; // Type comes from getStaticPaths
}

// Get the bottleneck from props - IMPORTANT: Declare this before using it below
const { bottleneck } = Astro.props;

// 404 handling (should not happen with static paths, but just in case)
if (!bottleneck) {
  return Astro.redirect("/404");
}

// Extract tags for display
const publicTags = bottleneck.tags || [];

// Check if we have a valid rank to display
const hasRank =
  bottleneck.bottleneck_rank !== undefined &&
  bottleneck.bottleneck_rank !== null &&
  bottleneck.bottleneck_rank > 0;

// Check if we have Metaculus data to display survey graph
const hasMetaculusData =
  bottleneck.metaculus_id &&
  bottleneck.metaculus_title &&
  bottleneck.metaculus_id.trim() !== "" &&
  bottleneck.metaculus_title.trim() !== "";
---

<BaseLayout title={`${bottleneck.bottleneck_name} | Gap Map`}>
  <div class="bottleneck-detail__nav">
    <EnhancedBackButton client:load />
    <SuggestEditButton
      contentType="Bottleneck"
      contentId={bottleneck.id}
      contentTitle={bottleneck.bottleneck_name}
      contentDescription={bottleneck.bottleneck_description}
      contentField={bottleneck.field?.id}
      client:load
    />
  </div>

  <div class="bottleneck-detail">
    <div class="bottleneck-detail__header">
      <div class="bottleneck-detail__meta">
        {
          bottleneck.field && (
            <div class="bottleneck-detail__field">
              <FieldLabel field={bottleneck.field} client:load />
            </div>
          )
        }

        <!-- Show the bottleneck rank only if available -->
        {
          hasRank && (
            <div class="bottleneck-detail__rank">
              <div class="rank-indicator-container">
                <h3 class="title">Urgency</h3>
                <div
                  class="rank-indicator"
                  title={`Rank: ${bottleneck.bottleneck_rank} out of 5`}
                >
                  {[1, 2, 3, 4, 5].map((blockRank) => (
                    <div
                      class={`rank-indicator__block ${blockRank <= bottleneck.bottleneck_rank ? "active" : ""}`}
                      aria-hidden="true"
                    />
                  ))}
                  <span class="sr-only">
                    Rank: {bottleneck.bottleneck_rank} out of 5
                  </span>
                </div>
              </div>
            </div>
          )
        }
      </div>

      <h1 class="bottleneck-detail__title">{bottleneck.bottleneck_name}</h1>

      <!-- Display public tags if available -->
      {
        publicTags.length > 0 && (
          <div class="bottleneck-detail__tags">
            {publicTags.map((tag) => (
              <span class="bottleneck-detail__tag">{tag}</span>
            ))}
          </div>
        )
      }
    </div>

    <div
      class="bottleneck-detail__content"
      set:html={bottleneck.bottleneck_description}
    />

    {
      bottleneck.foundational_capabilities &&
        bottleneck.foundational_capabilities.length > 0 && (
          <div class="bottleneck-detail__capabilities">
            <h2 class="indent">
              Foundational Capabilities{" "}
              <span class="subtle">
                ({bottleneck.foundational_capabilities.length})
              </span>
            </h2>
            <div class="bottleneck-detail__capabilities-grid">
              {(() => {
                // Sort capabilities by number of resources (descending)
                const sortedCapabilities = [
                  ...bottleneck.foundational_capabilities,
                ].sort((a, b) => {
                  const aResourceCount = a.resources?.length || 0;
                  const bResourceCount = b.resources?.length || 0;

                  // If resource counts are the same, sort alphabetically by name
                  if (aResourceCount === bResourceCount) {
                    return a.fc_name.localeCompare(b.fc_name);
                  }

                  // Otherwise sort by resource count (descending)
                  return bResourceCount - aResourceCount;
                });

                return sortedCapabilities.map((capability) => {
                  // Use the slug from capability data or generate a new one if missing
                  const capabilitySlug =
                    capability.slug || createCapabilitySlug(capability.fc_name);

                  return (
                    <div class="capability-card">
                      <a
                        class="clickable"
                        href={`/capabilities/${capabilitySlug}`}
                      />
                      <div class="capability-card__header">
                        <h3 class="capability-card__title">
                          <a href={`/capabilities/${capabilitySlug}`}>
                            {capability.fc_name}
                          </a>
                        </h3>
                      </div>
                      <div
                        class="capability-card__content"
                        set:html={capability.fc_description}
                      />

                      {capability.resources &&
                        capability.resources.length > 0 && (
                          <div class="capability-card__footer">
                            <div class="capability-card__resources">
                              {(() => {
                                // Sort resources by type first, then by title
                                const sortedResources = [
                                  ...capability.resources,
                                ].sort((a, b) => {
                                  // First sort by resource type (alphabetically)
                                  const aType = a.resourceTypes?.[0] || "";
                                  const bType = b.resourceTypes?.[0] || "";

                                  const typeComparison =
                                    aType.localeCompare(bType);

                                  // If types are the same, sort by title
                                  if (typeComparison === 0) {
                                    return a.resource_title.localeCompare(
                                      b.resource_title,
                                    );
                                  }

                                  return typeComparison;
                                });

                                // Group resources by type
                                const resourcesByType = {};

                                sortedResources.forEach((resource) => {
                                  const resourceType =
                                    resource.resourceTypes?.[0] || "Other";
                                  if (!resourcesByType[resourceType]) {
                                    resourcesByType[resourceType] = [];
                                  }
                                  resourcesByType[resourceType].push(resource);
                                });

                                // Render each group with a wrapper
                                return Object.entries(resourcesByType).map(
                                  ([resourceType, resources]) => (
                                    <div
                                      class="capability-card__resource-group"
                                      data-resource-type={resourceType}
                                    >
                                      <div class="capability-card__resource-group-items">
                                        {resources.map((resource) => (
                                          <li class="capability-card__resource-item">
                                            <div class="capability-card__resource-link">
                                              {resource?.resource_url ? (
                                                <a
                                                  href={resource.resource_url}
                                                  target="_blank"
                                                  rel="noopener noreferrer"
                                                >
                                                  {resource.resource_title}
                                                </a>
                                              ) : (
                                                <span>
                                                  {resource?.resource_title ||
                                                    "Untitled Resource"}
                                                </span>
                                              )}
                                              {/* Display resource types with updated class */}
                                              {resource?.resourceTypes &&
                                                resource.resourceTypes.length >
                                                  0 && (
                                                  <div class="capability-card__resource-types">
                                                    {resource.resourceTypes.map(
                                                      (type, index) => (
                                                        <span
                                                          class={`capability-card__resource-type resource-type-gradient-${type.toLowerCase().replace(/\s+/g, "-")}`}
                                                        >
                                                          {type}
                                                          {index <
                                                          resource.resourceTypes
                                                            .length -
                                                            1
                                                            ? ", "
                                                            : ""}
                                                        </span>
                                                      ),
                                                    )}
                                                  </div>
                                                )}
                                            </div>
                                          </li>
                                        ))}
                                      </div>
                                    </div>
                                  ),
                                );
                              })()}
                            </div>
                          </div>
                        )}
                    </div>
                  );
                });
              })()}
            </div>
          </div>
        )
    }

    {
      hasMetaculusData && (
        <div class="bottleneck-detail__survey">
          <SurveyGraph
            metaculus_id={bottleneck.metaculus_id}
            metaculus_title={bottleneck.metaculus_title}
            client:load
          />
        </div>
      )
    }
  </div>
</BaseLayout>

<script
  define:vars={{ bottleneckId: bottleneck.id, bottleneckSlug: bottleneck.slug }}
>
  // Save the current bottleneck info for potential scroll restoration
  import { saveScrollPosition } from "../../lib/scrollPositionUtils";

  document.addEventListener("astro:page-load", () => {
    // This runs when the page is fully loaded
    if (bottleneckId) {
      // Don't actually need to do anything here since we're tracking clicks in the BottleneckCard
      // But we could manually save position for direct URL accesses
      // saveScrollPosition(bottleneckId, bottleneckSlug);
    }
  });
</script>
